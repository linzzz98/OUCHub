Hybrid Camera Pose Estimation
==============================

本文旨在解决经校准的针孔相机和通用相机的位姿估计问题。 通过利用2D-3D对应以及2D-2D对应来构建SfM模型。

传统方法要么专注于使用2D-3D匹配（称为基于结构的位姿估计（structure-based）），要么仅专注于2D-2D匹配（无结构的位姿估计（structure-less））。

绝对位姿估计方法的性能受到3D点的三角剖分的质量以及3D模型完整性的限制。另一方面，相对位姿估计方法虽然更准确，但在计算上也往往要昂贵得多，并且经常返回许多可能的解。

本文工作旨在弥合这两种范式之间的鸿沟。提出了一种基于RANSAC的新方法，该方法可以自动选择最佳类型的求解器，以数据驱动的方式在每次迭代中使用。
RANSAC选择的求解器的范围从纯基于结构的求解器或无结构的求解器到混合求解器的任何可能组合（即使用两种匹配类型）。

Introduction
-------------

相机位姿估计的传统方法是根据查询图像中像素与场景模型中3D点之间的一组2D-3D匹配来估计姿态。通常通过在RANSAC循环中应用基于结构的最小位姿求解器来计算位姿。
根据n个2D-3D匹配进行绝对位姿估计的工作量很大，这个问题通常称为n点透视问题（PnP）。
当通过SfM获得3D模型时，并非是所有3D点都将被精确的三角剖分，从而导致潜在的不准确的位姿估计。

从2D-3D匹配中进行位姿估计的另一种方法是无结构位姿resectioning：查询图像（query image）的位姿是根据查询图像与重建中的两个或多个图像之间的一组2D-2D对应关系来估计的。
虽然这种方法避免了三角剖分点不正确和模型不完整的问题，但无结构的位姿求解器的计算效率却大大降低了（慢了几个数量级）。

本文提出了九种新颖的混合摄像机位姿求解器，它们的区别在于每次使用的2D-3D和2D-2D匹配项的数量以及它们是针对中央摄像机还是通用摄像机（或两者）进行处理。、

Background
-------------

Structure-based pose estimation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
在基于结构的位姿估计中遵循的经过程包括：

首先获得一组假定的2D-3D匹配项。 这些推定的匹配通常是通过将查询图像（或图像序列）中的关键点与与模型中每个3D点相关联的平均描述子进行匹配而获得的。
给定这些匹配项，通过在“假设和验证”方案（例如RANSAC）中采用最小求解器，可以可靠地推断出相机的位姿。


Structure-less pose estimation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
通过基于结构的方法获得的位姿精度受到相机观察到的3D点的质量限制。
另外，查询相机可以拥有的inlier matches的数量最多为摄像机看到的3D点的数量。
不是通过3D结构来明确表示场景，而是使用查询图像（或多个图像）与多个图像之间的2D-2D对应关系来进行位姿估计。 在这些情况下，查询图像通常与使用图像检索方法找到的SfM模型中存在的最相似图像进行匹配。

同样的，还可以通过遵循针对基于结构的位姿估计所描述的相同过程来获得2D-2D匹配。
一旦获得一组2D-3D匹配，就可以将每个匹配的3D对应替换为用于重建此3D点的SfM相机光线之一。（啥意思？） 接下来，在RANSAC循环内使用最小解算器，以便可靠地估计摄像机的位姿。

Hybrid pose estimation
~~~~~~~~~~~~~~~~~~~~~~
介于以上两者之间的，有一些求解器同时使用不同类型的匹配项，这被称为混合求解器。

Hybrid RANSAC for Pose Estimation
---------------------------------

令 :math:`\mathcal{M}_p` 为一组推定的2D-3D匹配，而:math:`\mathcal{M}_r` 为一组推定的2D-2D匹配。

传统方法是仅使用这些集合中的一组使用RANSAC与最小求解器（如P3P）或2D-2D无结构位姿求解器组合来鲁棒地估计查询相机的位姿。

但是，我们想利用所有可用信息，例如通过使用混合最小求解器，该求解器同时使用2D-3D和2D-2D匹配项。为了使用这样的求解器，RANSAC需要同时从 :math:`\mathcal{M}_p` 和 :math:`\mathcal{M}_r` 那里取样。

因此，其终止准则应适用于两个独立的inlier ratios，将其称为 :math:`\epsilon_r` 和 :math:`\epsilon_p` 。

设计可以处理两组不同的匹配项和inlier ratios以及许多不同的最小解算器的RANSAC变体时，会出现三个问题：

1. 如何选择到目前为止最好的模型？

2. 给定估计的线性比率 :math:`\epsilon_r` 和 :math:`\epsilon_p` ，以及过去选择的求解器，哪一个是用于下一次迭代的最佳求解器？

3. 什么时候应该终止？

对于第一个问题，本文采用经典的RANSAC方法，并在考虑了两组匹配的情况下，选择最佳模型作为整体inlier count最高的模型。
注意，可以为每组匹配选择不同的inlier ratios。

在每次迭代中，根据求解器首次在该迭代中成功的概率（从所有内部最小样本估计模型）来选择求解器。

因此，希望选择一个成功机会很高的求解器，而该求解器还没有被广泛使用以找到有效的解决方案。
这意味着它第一次找到好的解决方案的机会应该很高。

将这种概率称为成功概率，即 :math:`P_s` 。

假设 :math:`s` 是一个求解器，它要求 :math:`\mathcal{M}_r` 最少进行 :math:`n` 次匹配，:math:`\mathcal{M}_p` 至少进行 :math:`m` 个匹配项。

令 :math:`\epsilon_r` 和 :math:`\epsilon_p` 分别为集合 :math:`\mathcal{M}_p` 和 :math:`\mathcal{M}_r` 的真实inlier ratios

 :math:`\epsilon_r^n \epsilon_p^m` 给出在任何迭代中采样求解器 :math:`s` 的所有内点最小值集的概率。
