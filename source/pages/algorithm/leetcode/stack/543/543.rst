[543] 二叉树的直径
=====================================

.. figure:: q.jpg
   :figclass: align-center

Solution 1 (dfs)
---------------------------

.. note::

   一条路径的长度为该路径经过的节点数减一，所以求直径（即求路径长度的最大值）等效于求路径经过节点数的最大值减一。

   而任意一条路径均可以被看作由某个节点为起点，从其左儿子和右儿子向下遍历的路径拼接得到。

   假设我们知道对于该节点的左儿子向下遍历经过最多的节点数 L （即以左儿子为根的子树的深度） 和其右儿子向下遍历经过最多的节点数 R （即以右儿子为根的子树的深度），

   那么以该节点为起点的路径经过节点数的最大值即为 L+R+1 。

   我们记节点 node 为起点的路径经过节点数的最大值为 D，那么二叉树的直径就是所有节点 D 的最大值减一。

   算法流程为：我们定义一个递归函数 depth(node) 计算 D，函数返回该节点为根的子树的深度。先递归调用左儿子和右儿子求得它们为根的子树的深度 L 和 R ，则该节点为根的子树的深度即为

   .. math::

      max(L, R) + 1

   该节点的 D 值为:

   .. math::

      L + R + 1

   递归搜索每个节点并设一个全局变量 ans 记录 D 的最大值，最后返回 ans-1 即为树的直径。

.. code-block:: java

   class Solution {
       int ans;
       public int diameterOfBinaryTree(TreeNode root) {
           ans = 1;
           dfs(root);
           return ans - 1;
       }

       int dfs(TreeNode node){
           if(node == null){
               return 0;
           }
           int L = dfs(node.left);
           int R = dfs(node.right);
           ans = Math.max(ans, L + R + 1);
           return Math.max(L, R) + 1;
       }
   }

.. important::

   复杂度分析:

   * 时间复杂度：O(N)，其中 N 为二叉树的节点数，即遍历一棵二叉树的时间复杂度，每个结点只被访问一次。

   * 空间复杂度：O(Height)，其中 Height 为二叉树的高度。由于递归函数在递归过程中需要为每一层递归函数分配栈空间，所以这里需要额外的空间且该空间取决于递归的深度，而递归的深度显然为二叉树的高度，并且每次递归调用的函数里又只用了常数个变量，所以所需空间复杂度为 O(Height) 。