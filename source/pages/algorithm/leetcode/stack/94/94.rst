[94] 二叉树的中序遍历
=================================

.. figure:: q.jpg
   :figclass: align-center

Solution 1
-------------------

递归：


.. code-block:: java

   class Solution {
       public List<Integer> inorderTraversal(TreeNode root) {
           List<Integer> res = new ArrayList<>();
           inorder(root, res);
           return res;
       }

       public void inorder(TreeNode root, List<Integer> res){
           if(root == null){
               return;
           }

           inorder(root.left, res);
           res.add(root.val);
           inorder(root.right, res);
       }
   }

.. important::

   复杂度分析:

      * 时间复杂度：O(n)，其中 n 为二叉树节点的个数。二叉树的遍历中每个节点会被访问一次且只会被访问一次。
      * 空间复杂度：O(n)。空间复杂度取决于递归的栈深度，而栈深度在二叉树为一条链的情况下会达到 O(n) 的级别。

Solution 2
-------------------

迭代

.. code-block:: java

   class Solution{
       public List<Integer> inorderTraversal(TreeNode root) {
           List<Integer> res = new ArrayList<>();
           Stack<TreeNode> stack = new Stack<>();
           while(root != null || !stack.empty()){
               while(root != null){
                   stack.push(root);
                   root = root.left;
               }
               root = stack.pop();
               res.add(root.val);
               root = root.right;
           }
           return res;
       }
   }

.. important::

   复杂度分析:

      * 时间复杂度：O(n)，其中 n 为二叉树节点的个数。二叉树的遍历中每个节点会被访问一次且只会被访问一次。
      * 空间复杂度：O(n)。空间复杂度取决于栈深度，而栈深度在二叉树为一条链的情况下会达到 O(n) 的级别。


Solution 3
------------------

Morris 中序遍历

.. note::

   Morris 遍历算法是另一种遍历二叉树的方法，它能将非递归的中序遍历空间复杂度降为 O(1)。

   Morris 遍历算法整体步骤如下（假设当前遍历到的节点为 x）：

   1. 如果 x 无左孩子，先将 x 的值加入答案数组，再访问 x 的右孩子，即 x=x.right。
   2. 如果 x 有左孩子，则找到 x 左子树上最右的节点（即左子树中序遍历的最后一个节点，x 在中序遍历中的前驱节点），我们记为 predecessor。根据 predecessor 的右孩子是否为空，进行如下操作。

      * 如果 predecessor 的右孩子为空，则将其右孩子指向 x，然后访问 x 的左孩子，即 x=x.left。
      * 如果 predecessor 的右孩子不为空，则此时其右孩子指向 x，说明我们已经遍历完 x 的左子树，我们将 predecessor 的右孩子置空，将 x 的值加入答案数组，然后访问 x 的右孩子，即 x=x.right。

   3. 重复上述操作，直至访问完整棵树。

.. code-block:: java

   class Solution{
       public List<Integer> inorderTraversal(TreeNode root) {
           List<Integer> res = new ArrayList<>();
           TreeNode pre = null;

           while(root != null){
               if(root.left != null){
                   // pre 节点就是当前 root 节点向左走一步，然后一直向右走至无法走为止
                   pre = root.left;
                   while(pre.right != null && pre.right != root){
                       pre = pre.right;
                   }

                   // 让 pre 的右指针指向 root，继续遍历左子树
                   if(pre.right == null){
                       pre.right = root;
                       root = root.left;
                   }
                   // 说明左子树已经访问完了，我们需要断开链接
                   else{
                       res.add(root.val);
                       pre.right = null;
                       root = root.right;
                   }
               }
               // 如果没有左孩子，则直接访问右孩子
               else{
                   res.add(root.val);
                   root = root.right;
               }
           }
           return res;
       }
   }