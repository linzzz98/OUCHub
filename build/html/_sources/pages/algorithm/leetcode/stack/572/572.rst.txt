[572] 另一棵树的子树
==============================

.. figure:: q.jpg
   :figclass: align-center

Solution 1 (dfs)
------------------------------

.. note::

   思路和算法

      这是一种最朴素的方法——深度优先搜索枚举 s 中的每一个节点，判断这个点的子树是否和 t 相等。

      如何判断一个节点的子树是否和 t 相等呢，又需要做一次深度优先搜索来检查，即让两个指针一开始先指向该节点和 t 的根，然后「同步移动」两根指针来「同步遍历」这两棵树，判断对应位置是否相等。

.. code-block:: java

   class Solution {
       public boolean isSubtree(TreeNode root, TreeNode subRoot) {
           return dfs(root, subRoot);
       }

       public boolean dfs(TreeNode s, TreeNode t) {
           if (s == null) {
               return false;
           }
           return check(s, t) || dfs(s.left, t) || dfs(s.right, t);
       }

       public boolean check(TreeNode s, TreeNode t) {
           if (s == null && t == null) {
               return true;
           }
           if (s == null || t == null || s.val != t.val) {
               return false;
           }
           return check(s.left, t.left) && check(s.right, t.right);
       }
   }