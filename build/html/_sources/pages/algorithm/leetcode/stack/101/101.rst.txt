[101] 对称二叉树
=======================================

.. figure:: q.jpg
   :figclass: align-center

Solution 1 (递归)
------------------------------

.. note::

   实现这样一个递归函数，通过「同步移动」两个指针的方法来遍历这棵树，p 指针和 q 指针一开始都指向这棵树的根，随后 p 右移时，q 左移，p 左移时，q 右移。

   每次检查当前 p 和 q 节点的值是否相等，如果相等再判断左右子树是否对称。

.. code-block:: java

   class Solution {
       public boolean isSymmetric(TreeNode root) {
           return check(root.left, root.right);
       }
       boolean check(TreeNode p, TreeNode q){
           if(p == null && q == null){
               return true;
           }
           if(p == null || q == null){
               return false;
           }
           return p.val == q.val && check(p.left, q.right) && check(p.right, q.left);
       }
   }

.. important::

   复杂度分析:  假设树上一共 n 个节点。

   * 时间复杂度：这里遍历了这棵树，渐进时间复杂度为 O(n)。

   * 空间复杂度：这里的空间复杂度和递归使用的栈空间有关，这里递归层数不超过 n，故渐进空间复杂度为 O(n)。

Solution 2 (迭代)
-------------------------

.. note::

   初始化时把根节点入队两次。每次提取两个结点并比较它们的值（队列中每两个连续的结点应该是相等的，而且它们的子树互为镜像），

   然后将两个结点的左右子结点按相反的顺序插入队列中。

   当队列为空时，或者我们检测到树不对称（即从队列中取出两个不相等的连续结点）时，该算法结束。

.. code-block:: java

   class Solution {
       public boolean isSymmetric(TreeNode root) {
           return check(root.left, root.right);
       }
       boolean check(TreeNode p, TreeNode q){
           Queue<TreeNode> queue = new LinkedList<>();
           queue.offer(p);
           queue.offer(q);

           while(!queue.isEmpty()){
               p = queue.poll();
               q = queue.poll();
               if(p == null && q == null){
                   continue;
               }
               if((p == null || q == null) || (p.val != q.val)){
                   return false;
               }
               queue.offer(p.left);
               queue.offer(q.right);
               queue.offer(p.right);
               queue.offer(q.left);
           }
           return true;
       }
   }

.. important::

   复杂度分析:

   * 时间复杂度：O(n)，同「方法一」。

   * 空间复杂度：这里需要用一个队列来维护节点，每个节点最多进队一次，出队一次，队列中最多不会超过 n 个点，故渐进空间复杂度为 O(n)。