String,StringBuffer,StringBuilder的区别
=========================================================

|:point_right:| \ `原文链接 <https://zhuanlan.zhihu.com/p/77614811>`_


在JAVA中字符串的表示有三种方式 String StringBuilder StringBuffer .

关于String 需要注意两点：

1. String是不可变的字符串，它的底层是一个用final修饰的字符数组

2. String 对象赋值之后就会在字符串常量池中缓存，如果下次创建会判定常量池是否已经有缓存对象，如果有的话直接返回该引用给创建者。

.. note::

   String 创建的字符串存储在公共池中，而 new 创建的字符串对象在堆上：

   .. figure:: 1.jpg
      :figclass: align-center



   注意:String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了

   字符串实际上就是一个 char 数组，并且内部就是封装了一个 char 数组。

   并且这里 char 数组是被 final 修饰的:

   .. code-block:: java

      public final class String
          implements java.io.Serializable, Comparable<String>, CharSequence {
          /** The value is used for character storage. */
          private final char value[];

   String 中的所有的方法，都是对于 char 数组的改变，只要是对它的改变，方法内部都是返回一个新的 String 实例。

   .. code-block:: java

      String s = "Google";
      System.out.println("s = " + s);

      s = "Runoob";
      System.out.println("s = " + s);

      // 输出结果为：
      // Google
      // Runoob

   从结果上看是改变了，但为什么说 String 对象是不可变的呢？

   原因在于实例中的 s 只是一个 String 对象的引用，并不是对象本身，当执行 s = "Runoob"; 创建了一个新的对象 "Runoob"，而原来的 "Google" 还存在于内存中。


   .. figure:: 4.jpg
      :figclass: align-center


StringBuffer 和 StringBuilder 类
-----------------------------------------------------

当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。

和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。

.. figure:: 2.jpg
   :figclass: align-center

区别
------------------------

**String：**

   字符串常量，字符串长度不可变。Java中String 是immutable（不可变）的。用于存放字符的数组被声明为final的，因此只能赋值一次，不可再更改。

**StringBuffer：**

   字符串变量（Synchronized，即线程安全）。如果要频繁对字符串内容进行修改，出于效率考虑最好使用 StringBuffer，如果想转成 String 类型，可以调用 StringBuffer 的 toString() 方法。Java.lang.StringBuffer 线程安全的可变字符序列。在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。可将字符串缓冲区安全地用于多个线程。

**StringBuilder：**

   字符串变量（非线程安全）。在内部 StringBuilder 对象被当作是一个包含字符序列的变长数组。

基本原则：

* 如果要操作少量的数据用 String ；

* 单线程操作大量数据用StringBuilder ；

* 多线程操作大量数据，用StringBuffer。


在使用 StringBuffer 类时，每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，所以如果需要对字符串进行修改推荐使用 StringBuffer。

.. important::

   StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。

   由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。

.. figure:: 3.jpg
   :figclass: align-center

格式化
-------------------------------------

整数
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   ``%[index$][标识][最小宽度]转换方式``

   格式化字符串由4部分组成，特殊的格式常以%index$开头，index从1开始取值，表示将第index个参数拿进来进行格式化，[最小宽度]的含义也很好理解，就是最终该整数转化的字符串最少包含多少位数字。剩下2个部分的含义：

   标识：

   * '-' 在最小宽度内左对齐，不可以与"用0填充"同时使用
   * '#' 只适用于8进制和16进制，8进制时在结果前面增加一个0，16进制时在结果前面增加0x
   * '+' 结果总是包括一个符号(一般情况下只适用于10进制，若对象为BigInteger才可以用于8进制和16进制)
   * ' ' 正值前加空格，负值前加负号(一般情况下只适用于10进制，若对象为BigInteger才可以用于8进制和16进制)
   * '0' 结果将用零来填充
   * ',' 只适用于10进制，每3位数字之间用"，"分隔
   * '(' 若参数是负数，则结果中不添加负号而是用圆括号把数字括起来(同'+'具有同样的限制)

   .. code-block:: java

      System.out.println(String.format("%1$,09d", -3123));
      System.out.println(String.format("%1$9d", -31));
      System.out.println(String.format("%1$-9d", -31));
      System.out.println(String.format("%1$(9d", -31));
      System.out.println(String.format("%1$#9x", 5689));
      //结果为：
      //-0003,123
      // -31
      //-31
      // (31)
      // 0x1639　

浮点数
~~~~~~~~~~~~~~~~~~~~~

``%[index$][标识][最少宽度][.精度]转换方式``

标识：

* '-' 在最小宽度内左对齐，不可以与"用0填充"同时使用
* '+' 结果总是包括一个符号
* ' ' 正值前加空格，负值前加负号
* '0' 结果将用零来填充
* ',' 每3位数字之间用"，"分隔(只适用于fgG的转换)
* '(' 若参数是负数，则结果中不添加负号而是用圆括号把数字括起来(只适用于eEfgG的转换)

转换方式：

* 'e', 'E' -- 结果被格式化为用计算机科学记数法表示的十进制数
* 'f' -- 结果被格式化为十进制普通表示方式
* 'g', 'G' -- 根据具体情况，自动选择用普通表示方式还是科学计数法方式
* 'a', 'A' -- 结果被格式化为带有效位数和指数的十六进制浮点数


concat() 方法和 + 号的区别:
--------------------------------------

.. code-block:: java

   public class Demo{
       public static void main(String[] args){
           String str1 = "a".concat("b").concat("c");
           String str2 = "a"+"b"+"c";
           String str3 = "abc";
           String str4 = new String("abc");
           System.out.println(str1 == str2); //运行结果为false
           System.out.println(str1 == str3); //运行结果为false
           System.out.println(str2 == str3); //运行结果为ture
           System.out.println(str2 == str4); //运行结果为false
           System.out.println(str1.equals(str4)); //运行结果为true
       }
   }

.. note::

   解析：

      首先关于 new 出来的对象和 String s = "字符串" 的 == 执行结果为 false 就不多赘述了，因为 == 比较的是两个对象的地址值，equals() 比较的是字面值。

      那么 concat 方法和 + 号的区别在这里有体现了，查看concat方法的源码可以看到，它是通过复制数组在通过 char 数组进行拼接生成一个新的对象，所以地址值会有变动，而 + 号不会。

String 类的常见面试问题
-------------------------------------

面试题一：

.. code-block:: java

   String s1 = "abc";            // 常量池
   String s2 = new String("abc");     // 堆内存中
   System.out.println(s1==s2);        // false两个对象的地址值不一样。
   System.out.println(s1.equals(s2)); // true

面试题二：

.. code-block:: java

   String s1="a"+"b"+"c";
   String s2="abc";
   System.out.println(s1==s2);
   System.out.println(s1.equals(s2));

java 中常量优化机制，编译时 s1 已经成为 abc 在常量池中查找创建，s2 不需要再创建。

面试题三：

.. code-block:: java

   String s1="ab";
   String s2="abc";
   String s3=s1+"c";
   System.out.println(s3==s2);         // false
   System.out.println(s3.equals(s2));  // true

先在常量池中创建 ab ，地址指向 s1, 再创建 abc ，指向 s2。对于 s3，先创建StringBuilder（或 StringBuffer）对象，通过 append 连接得到 abc ,再调用 toString() 转换得到的地址指向 s3。故 (s3==s2) 为 false。