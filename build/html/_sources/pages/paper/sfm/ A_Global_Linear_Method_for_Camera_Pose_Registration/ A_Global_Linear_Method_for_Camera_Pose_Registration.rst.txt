A Global Linear Method for Camera Pose Registration
===================================================

本文提出了一种线性方法，用于从基本矩阵中编码的成对相对位姿中获取全局摄像机姿势。该方法最大程度地减少了近似几何误差，以在相机三元组中强制执行三角关系。

Review
------

输入是图像对之间的基本矩阵(五点法计算)。两个图像\ :math:`i,j`\ 之间的基本矩阵Eij提供了相对旋转\ :math:`R_{ij}`\ 和平移方向\ :math:`t_{ij}`\ 。
在此，\ :math:`R_{ij}`\ 是\ :math:`3×3`\ 正交矩阵，而\ :math:`t_{ij}`\ 是\ :math:`3×1`\ 单位向量。

目标是在全局坐标系中恢复所有相机绝对姿势。
使用旋转矩阵\ :math:`R_i`\ 和平移矢量\ :math:`c_i`\ 来表示第\ :math:`i`\ 个相机的方向和位置。(1)

.. math::


   R_j = R_{ij}R_i~~~~~R_j (c_i-c_j) \simeq t_{ij}

其中\ :math:`\simeq`\ 表示最大程度相等(equality up to a scale)。

在实际数据中，这些方程将无法精确满足，因此我们需要找到一组最能满足这些方程的\ :math:`R_i,c_i`

基于两个标准设计方法：

(1)解决方案应该简单有效。
因为最后要采取BA优化，所以近似的解决方案是可以接受的。

(2)应将摄像机的姿势与场景点分开解决。
场景点通常比摄像机多得多，因此在没有场景点的情况下解决摄像机位姿将大大减少未知数。

首先应用《D. Martinec and T. Pajdla. Robust rotation and translation
estimation in multiview reconstruction. In Proc. CVPR, pages 1–8,
2007.》中描述的线性方法来计算全局摄像机旋转\ :math:`R_i`\ 。它通过忽略\ :math:`R_i`\ 对其列向量的正交约束来过度参数化\ :math:`R_i`\ ，并一次从线性方程\ :math:`R_j = R_{ij}R_i`\ 求解所有旋转矩阵。

固定所有旋转后，我们便可以求解所有相机中心\ :math:`(c_i,1≤i≤N)`\ ，而无需重建任何3D点。

Translation Registration
------------------------

首先将每一个\ :math:`t_{ij}`\ 通过全局旋转参考帧转换为\ :math:`c_{ij} = -R^{T}t_{ij}`\ ，(1)中对摄像机中心的约束可以写成(2)

.. math::


   c_{ij} \times (c_j - c_i) = 0

这是关于未知摄像机中心的线性方程。具有较大基线长度的图像对的方程式具有更大的权重，需要仔细的迭代重加权才能获得良好的结果。

实际上，上述公式使\ :math:`c_{ij}`\ 与基线方向\ :math:`c_j -c_i`\ 之间的叉积最小。下文中导出了一个线性算法，该算法使近似几何误差最小。

Triplet Translation Registration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

从三个摄像机的特殊情况开始。

已知摄像机对之间的相对位移\ :math:`c_{ij},c_{ik}`\ 和\ :math:`c_{jk}`\ ，需要估算相机中心\ :math:`c_i,c_j`\ 和\ :math:`c_k`\ 。理想情况下，三个单位向量\ :math:`c_{ij},c_{ik}`\ 和\ :math:`c_{jk}`\ 应该是共面的。但由于噪声的存在，实际数据中这三个不会共面。

首先考虑\ :math:`c_{ij}`\ 是完美的，并最小化\ :math:`c_k`\ 和两条线\ :math:`l(c_i,c_{ik})`\ 和\ :math:`l(c_j,c_{jk})`\ 的欧几里得距离。

这里，\ :math:`l(p,q)`\ 是经过点p且方向为q的线。由于测量噪声，\ :math:`l(c_i,c_{ik})`\ 和\ :math:`l(c_j,c_{jk})`\ 通常是非共面的。

因此最优解\ :math:`c_k`\ 位于它们共同的垂直线\ :math:`AB`\ 的中点

.. figure:: 1.png
    :figclass: align-center

计算为：(3)

.. figure:: 2.png
    :figclass: align-center

这里\ :math:`||c_i - c_j||`\ 指\ :math:`c_i`\ 和\ :math:`c_j`\ 之间的距离。

:math:`s_{ij}^{ik} = sin(\theta_j')/sin(\theta_k') = ||c_i - c_k|| / ||c_i - c_j||`

:math:`s_{ij}^{jk} = sin(\theta_i')/sin(\theta_k') = ||c_j - c_k|| / ||c_i - c_j||`

:math:`s_{ij}^{ik}`\ 和\ :math:`s_{ij}^{jk}`\ 是有效基线长度比。角度如上图描述所得(\ :math:`\theta_k'`\ 是线\ :math:`c_{ik}`\ 和\ :math:`c_{jk}`\ 之间的夹角)

    证明：\ :math:`c_iA`\ 和\ :math:`c_iB`\ 的长度大约为\ :math:`s_{ij}^{ik}||c_i - c_j||`\ 和\ :math:`s_{ij}^{jk}||c_i - c_j||`

    向量\ :math:`c_{ij},c_{ik},c_{jk}`\ 应该接近共面。从而角度\ :math:`∠Ac_ic_k`\ 接近0，长度\ :math:`c_iA`\ 接近\ :math:`c_ic_k`

    计算\ :math:`c_ic_k`\ 的角度为：

    .. figure:: 3.png
        :figclass: align-center
    因为三个向量接近共面，所以\ :math:`\theta_j' \approx \theta_j,\theta_k' \approx \theta_k`

    然后，将\ :math:`A`\ 的3D坐标近似为\ :math:`c_i + s_{ij}^{ik}||c_i - c_j|| c_{ik}`

    同样的，将\ :math:`B`\ 的3D坐标近似为\ :math:`c_j + s_{ij}^{jk}||c_i - c_j|| c_{jk}`

    所以，作为AB的中点，\ :math:`c_k`\ 的坐标为…(3)

等式(3)关于未知相机中心是非线性的。 为了使其线性化：(4)

.. figure:: 4.png
    :figclass: align-center

在此，\ :math:`Ri(φ)`\ 是绕轴\ :math:`c_{ij}×c_{ik}`\ 旋转角度为\ :math:`φ`\ (逆时针)的矩阵。

从而可以得到线性公式：(5)

.. figure:: 5.png
    :figclass: align-center

:math:`Rj(·)`\ 是绕方向\ :math:`c_{ij}×c_{jk}`\ 的旋转矩阵。

同样，假设\ :math:`c_{ik}`\ 和\ :math:`c_{jk}`\ 分别没有误差，我们可以得到以下两个摄像机中心线性方程，

.. figure:: 6.png
    :figclass: align-center

解决这三个线性方程可以确定相机的中心。

注意：\ **公式(5)不需要方向\ :math:`c_j-c_i`\ 与\ :math:`c_{ij}`\ 相同。**

这会在由相机中心定义的平面中引入旋转模糊度。可以通过在初始配准后计算平均旋转以将\ :math:`c_j-c_i,c_k-c_i`\ 和\ :math:`c_k-c_j`\ 分别与\ :math:`c_{ij},c_{ik}`\ 和\ :math:`c_{jk}`\ 的投影在相机平面上对齐来解决此问题。

Collinear Camera Motion
~~~~~~~~~~~~~~~~~~~~~~~

通过正弦角计算基线长度比率仅在\ :math:`c_{ij},c_{ik}`\ 和\ :math:`c_{jk}`\ 不共线时才有效。为了适用所有摄像机类型，本文从局部重建的场景点计算所有基线长度比率。

假设在所有三个图像中可见3D场景点X。从图像\ :math:`i,j`\ 的成对重建中，在假定单位基线长度的情况下，计算图像\ :math:`j`\ 中X的深度\ :math:`d^{ij}_j`\ 。同样可以根据图像\ :math:`j,k`\ 计算图像\ :math:`j`\ 中X的深度为\ :math:`d_{j}^{jk}`\ 。然后将比率\ :math:`s_{jk}^{ij}`\ 估计为\ :math:`d_{j}^{jk}/ d_j^{ij}`\ 。

通常，在所有三个图像中都可以看到多个场景点。

做法是丢弃较远的远点，并使用RANSAC计算平均比率。
注意，只需要局部成对重构即可获得基线长度比。位移配准不涉及在全局坐标系中重建任何场景点。

Multi-view Translation Registration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

该方法可以直接应用于注册多台摄像机。
给定一个三元组图，从其三元组中收集所有方程式(即方程式[5-7])，并求解所得的稀疏线性系统\ :math:`Ac = 0`\ 。

**这里，\ :math:`c`\ 是通过连接所有相机中心形成的向量。
:math:`A`\ 是通过收集所有线性方程形成的矩阵。解是矩阵\ :math:`A`\ 的非平凡零向量，由与\ :math:`A^TA`\ 的第四最小特征值相关的特征向量给出。**

与三个零特征值关联的特征向量对应于世界坐标系原点的三个自由度。

在所有摄像机共面的特殊情况下，存在与三摄像机情况类似的全局平面内旋转模糊度。可以使用之前描述的相同方法来计算此旋转。

实际上，每个图像都参与不同数量的三元组。
因此，求解\ :math:`Ac = 0`\ 时，将根据包含该特定相机的约束的数量，为未知相机中心隐式赋予不同的权重。

因此，对于每个摄像机\ :math:`i`\ ，计算包含其中心的三元组约束的数量，用\ :math:`K_i`\ 表示。

每个涉及摄像机\ :math:`i,j,k`\ 的三元组约束都由\ :math:`\frac{1}{min(K_i,K_j,K_k)}`\ 重新加权

Generalization to EG Outliers
-----------------------------

如果在成对的对极几何结构(EGs)中没有明显的误差，则可以使用上面两节中描述的方法。

但是，由于可疑的特征匹配，许多图像集(尤其是无序的Internet图像)会生成错误较大的错误EG，尤其是对于具有重复结构的场景。
错误的EG会导致错误估计旋转和平移。

本文采取以下步骤来构建强大的系统：

-  Match Graph Construction：

对于每个输入图像，我们可以通过词汇树(vocabulary
tree)找到其80个最近的邻居。五点算法可以计算这些图像之间的EG。

然后，构建一个“匹配图”，其中每个图像都是一个顶点，并且如果可以在它们之间计算EG，则连接两个顶点。
仅重建匹配图的最大连接部分。

-  EG Verification：

执行几个步骤验证以识别不正确的EG：

1. 验证匹配图中的每个三元组，并删除不参与通过验证的三元组的EG。

   具体来说，将位移配准应用于每个三元组，并计算配准前后相对位移方向之间的平均差。
   如果该平均差大于阈值\ :math:`δ_1`\ ，则认为验证失败。

   进一步要求已注册的三重相机可以对至少一个好点(投影误差小于4像素)进行三角测量。

2. 在匹配图的边缘中，提取“可靠边缘”的子集来计算全局摄像机方向。

   首先根据边缘的对应数量对每个边缘进行加权，并采用最大的生成树。

   然后，遍历所有有效的三元组。
   如果三元组的两个边缘在选定的“可靠边缘”集中，插入其第三条边缘。
   对该插入进行迭代，以包括尽可能多的可靠边缘。

3. 进一步使用这些相机方向来验证匹配图的边缘，如果循环旋转矩阵《Disambiguating
   visual relations using loop
   constraints.》与单位矩阵之间的测地距离大于\ :math:`δ_2`\ ，则丢弃边缘。

   在这里，循环矩阵为\ :math:`R_{ij}^TR_jR_i^T`

4. 只考虑剩余匹配图中最大的连接部分。
   通常，将\ :math:`δ_1`\ 和\ :math:`δ_2`\ 分别设置为3°和5°。

-  Connected Triplet Graph：

进一步从匹配图中提取连接的三元组图，其中每个三元组都由一个顶点表示。如果两个顶点的三元组在匹配图中具有公共边，则将其连接。

.. figure:: 7.png
    :figclass: align-center

匹配图的单个连接组件可以生成多个连接的三元组图，然后，应用第4节中方法分别计算每个三元组图中的摄像机位置。

在解决了相机位置之后，从feature tracks中对3D场景点进行三角测量。

当存在多个三元组图时，将它们的重建合并以获得最终结果。
