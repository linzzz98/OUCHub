PL-SLAM: Real-Time Monocular Visual SLAM with Points and Lines
==================================================================

.. figure:: 1.jpg
   :figclass: align-center
   :scale: 80%

低纹理场景是依赖点对应的几何计算机视觉算法的主要致命弱点之一，但是在许多环境中，尽管纹理较低，但仍然可以可靠地估计基于线的几何图元，例如在城市和室内场景中，或者在结构化边缘占主导地位的所谓“曼哈顿世界”（Manhattan worlds）中。

本文建立在 ORB-SLAM 的基础上，扩展其公式以同时处理点和线对应，当大部分点从输入图像中消失时，该解决方案甚至可以工作，它可以仅通过检测三个连续帧中的线对应来进行初始化。

在处理纹理不佳的视频或特征点由于例如运动模糊而暂时消失时，ORB很容易失败。然而，尽管缺乏可靠的特征点，这些环境可能仍然包含许多可以以类似方式使用的线。

.. attention::

   1. 现有的线检测器和参数化在文献中不如特征点那样完善。

   2. 根据线对应计算姿态的算法不如基于点的算法可靠，并且对线可能经历的部分遮挡非常敏感。

.. important::

   :贡献:

      1. 基于ORB-SLAM提出了 PL-SLAM（点和线 SLAM），这是一种可以同时利用点和线信息的解决方案。

      2. 提出了一种新的初始化方法，该方法允许仅从三个连续图像之间的线对应估计近似初始图。

      .. note::

         以前的解决方案基于单应性或基本矩阵估计，并且需要点对应。没有基于线条的等效技术。

         本文提出的解决方案基于三个连续帧之间的恒定旋转的假设，并且这些旋转相对较小。

         在实验部分将展示尽管有这些近似值，但估计的初始地图与通过基于点的解决方案获得的地图非常相似，因此，当特征点不可用时，这是一个非常好的替代方案。

.. figure:: 2.jpg
   :figclass: align-center
   :scale: 80%

.. important::

   如上图所示，PL-SLAM算法分为三个主要线程：跟踪、局部地图创建和回环检测。其中，跟踪线程对相机位姿进行估计，并决定何时添加新的关键帧。进而，局部地图创建线程将新的关键帧信息引入地图并运用BA对地图进行优化。回环检测线程则不断进行回环进行检测和修正。

   在跟踪线程中，运用LSD算法对输入帧中的线段特征进行检测和提取，同时对点特征进行提取，进而运用相关图策略对线段特征成对地进行匹配。当图像帧中包含了足够多的环境信息后，将其作为一个关键帧。

   在局部建图线程中，不能从至少三个视角被观测到或者在25%的关键帧中为不可见的线段，会被判定为异常值，从而被剔除。进而，对线段特征进行三角化，并融入局部地图中。最后运用局部BA方法对点线特征进行优化。

   由于对整个地图中的线段特征进行匹配计算量太大，所以只利用点特征进行回环检测。

输入帧中的线段通过 LSD [31] 检测，这是一个 O(n) 线段检测器，其中 n 是图像中的像素数。 然后，使用关系图策略 [33] 将线与地图中已经存在的线成对匹配。
这种方法依赖于线的局部外观（Line Band Descriptors）和几何约束，并且在保持计算效率的同时对图像伪影（image artifacts）非常稳健。

.. note::

   **lsd** ：LSD: a line segment detector. IPOL, 2:35–55,  2012.

   **Relational Graph Strategy** ： An efficient and robust line segment matching approach based on LBD descriptor and pairwise geometric consistency JVCIR,  24(7):794–805,  2013

与点特征一样，在获得一组初始的地图到图像线特征对后，局部地图的所有线都被投影到图像上以找到进一步的对应关系。
然后，如果图像包含有关环境的足够新信息，则将其标记为关键帧，并对其相应的线进行三角剖分并将其添加到地图中。 为了丢弃可能的异常值，从少于三个视点或少于 25% 的帧中看到的线也被丢弃（剔除）。
地图中的线位置使用本地 BA 进行了优化。

.. attention::

   不使用线进行循环闭合。 在整个地图上匹配线的计算成本太高。 因此，只有点特征用于循环检测。

LINE-BASED SLAM
---------------

.. figure:: 8.jpg
   :figclass: align-center

1. 基于线的重投影误差

   .. note::

      参考论文 Accurate and Linear Time Pose Estimation from Points and Lines. In  ECCV,  2016.

   让 :math:`P, Q \in R^3` 是一条线的 3D 端点， :math:`p_d,q_d \in R^2` 是它们在图像平面中的 2D 检测。
    :math:`p_d^h,q_d^h \in R^3` 是它们对应的齐次坐标。

   可以得到归一化的线系数为：

   .. math::

      l = \frac{p_d^h \times q_d^h}{|p_d^h \times q_d^h|}

   线重投影误差  :math:`E_{line}` 被定义为投影线段端点之间的点到线距离 :math:`E_{pl}` 和图像平面中检测到的线的总和

   .. math::

      E_{line}(P,Q,I,\theta,K) = E^2_{pl}(P,I,\theta,K) + E_{pl}^2(Q,I,\theta,K)

   其中：

   .. math::

      E_{pl}(P,I,\theta,K) = I^T \pi (P,\theta, K)

   其中 :math:`l` 是检测到的线系数， :math:`\pi (P,\theta,K)` 表示端点 :math:`P` 在图像平面上的投影，给定相机内参 :math:`K` ，以及相机参数 :math:`\theta = \{R,t\}` （包括旋转和平移参数）。

   .. note::

      由于实际情况，例如线遮挡或误检测，图像检测到的端点 :math:`p_d` 和 :math:`q_d` 将与端点 :math:`P` 和 :math:`Q` 的投影不匹配。

      因此，将检测到的线重投影误差定义为：

      .. math::

         E_{line,d}(p_d,q_d,I) = E^2_{pl,d}(p_d,I) + E^2_{pl,d}(q_d,I)

      其中 :math:`I` 是投影的 3D 线系数，检测到的点到线误差是  :math:`E_{pl,d}(p_d,I) = I^T p_d` 。

   基于文献中提出的方法，将应用对检测到的重投影线误差的递归，以优化位姿参数 :math:`\theta` ，同时将  :math:`E_{line,d}` 逼近等式上定义的线误差 :math:`E_{line}` 。

2. 使用点和线进行BA调整

   设 :math:`X_j\in R^3` 是map的第 :math:`j` 个通用点，对于第 :math:`i` 个关键点，这个点可以投影到图像平面上：

   .. math::

      \tilde{x}_{i,j} = \pi (X_j, \theta_i, K)

   其中 :math:`\theta_i = \{R_i, t_i\}` 表示第 :math:`i` 个关键帧的特定位姿。 给定对这一点的观察 :math:`x_{i,j}` ，定义以下 3D 误差：

   .. math::

      e_{i,j} = x_{i,j} - \tilde{x}_{i,j}

   类似地，用 :math:`P_j` 和 :math:`Q_j` 表示第 :math:`j` 个地图线段的端点。
   对应的图像投影（以齐次坐标表示）到同一关键帧上可以写成：

   .. math::

      \tilde{p}_{i,j}^h = \pi(P_j, \theta_i, K)

      \tilde{q}_{i,j}^h = \pi(Q_j, \theta_i, K)

   然后，给定第 :math:`j` 条线端点的图像观测值 :math:`p_{i,j}` 和 :math:`q_{i,j}` ，使用等式 :math:`l = \frac{p_d^h \times q_d^h}{|p_d^h \times q_d^h|}` 估计观察到的线 :math:`\tilde{I}_{i,j}` 的系数。

   为该线定义以下误差向量：

   .. math::

      e'_{i,j} = (\tilde{I}_{i,j})^T(K^{-1}p_{i,j}^h)
      e''_{i,j} = (\tilde{I}_{i,j})^T(K^{-1}q_{i,j}^h)

   .. note::

      上面所示的误差实际上是点到线的误差 :math:`E_{pl}(P,I,\theta,K) = I^T \pi (P,\theta, K)` 的实例。
      它们对于端点 :math:`P_j, Q_j` 沿相应 3D 线的移动不是恒定的，这作为隐式正则化允许在 BA 中使用这种非最小线参数化。

   观察到使用端点表示线可以获得点和线的可比较误差表示，因此构建一个统一的成本函数：

   .. math::

      C = \sum\limits_{i,j} \rho (e_{i,j}^T \Omega_{i,j}^{-1} e_{i,j} + e_{i,j}^{'T} \Omega_{i,j}^{'-1} e'_{i,j} + e_{i,j}^{''T} \Omega_{i,j}^{''-1} e''_{i,j})

   其中 :math:`\rho` 是 Huber 鲁棒成本函数， :math:`\Omega_{i,j}, \Omega'_{i,j}, \Omega''_{i,j}` 分别是与检测到关键点和线端点的尺度相关的协方差矩阵。


全局重定位
---------------

   SLAM 通过 PnP + RANSAC 算法在跟踪器丢失时重新定位相机。

   本文通过EPnPL 代替EPnP 处理重定位线，最大限度地减少了检测到的等式线重投影误差

   .. math::

      E_{line,d}(p_d,q_d,I) = E^2_{pl,d}(p_d,I) + E^2_{pl,d}(q_d,I)

   此外EPnPL对部分线遮挡和误检测具有鲁棒性，通过两步程序实现的：

   1. 最小化检测到的线的重投影误差并估计线端点 :math:`p_d,q_d`

   2. 点沿着线移动，以匹配 3D 模型端点 P、Q 的投影  :math:`\tilde{p}_d, \tilde{q}_d`

   建立了这些匹配，就可以可靠地估计相机位姿。

带线的地图初始化
------------------------

本文的另一个贡献是一种仅使用线对应估计初始地图的算法，这在缺乏特征点的低纹理场景中是一个很好的选择。

.. figure:: 4.jpg
   :figclass: align-center

考虑上图的设置，其中由端点 :math:`P,Q` 定义的线被投影到三个相机视图上。
设 :math:`\{p_1,q_1\}` ， :math:`\{p_2,q_2\}` 和 :math:`\{p_3,q_3\}`  是每个视图中的端点投影， :math:`l_1, l_2, l_3 \in R_3` 是从投影端点计算的相应线系数。

.. important::

   假设连续相机位姿之间的小幅连续旋转，这样从第一个到第二个相机视图的旋转与从第二个到第三个视图的旋转是相等的。

   在这个假设下，可以用  :math:`R_1 = R^T, R_2 = I, R_3 = R` 表示三个相机旋转。

.. note::

   线系数  :math:`l_i , i = {1, 2, 3}`  也表示向量的参数，该向量垂直于由投影中心 :math:`O_i` 和投影 :math:`p_i,q_i` 形成的平面。

两个这样的向量 :math:`l_i` 的叉积将平行于线 :math:`P,Q` ，同时与第三个向量正交，所有这些向量都适当地旋转并置于公共参考系中：

.. math::

   l_2^T((R^T l_1) \times (R l_3)) = 0

此外，对于小旋转，可以将 R 近似为：

.. math::

   R = \left(
   \begin{matrix}
   1 & -r_3 & r_2\\r_3 & 1 & -r_1\\-r_2 & r_1 & 1
   \end{matrix}
   \right)

.. attention::

   对于这样的参数化，有三个匹配的线，因此将有三个二次方程，如 :math:`l_2^T((R^T l_1) \times (R l_3)) = 0` 和三个未知数 :math:`r_1,r_2,r_3` ，本文采用

   《Polynomial eigenvalue solu- tions to minimal problems in computer vision》 的求解器，

   该求解器产生多达八个解。对于每个可能的旋转矩阵，通过使用三焦张量方程得到 :math:`t_1,t_3` ，这些方程在 :math:`t_1, t_3` 中是线性的。假设 :math:`t_2 = 0` 。评估八种可能的解，并保留最小化方程的那个解。

.. note::

   为了在使用三焦张量方程求解平移分量时获得足够的独立约束，需要两个额外的线对应，因此，算法所需的线匹配总数为 5。

实验
--------------

使用 TUM RGB-D 基准将PL-SLAM系统与当前最先进的 Visual SLAM 方法进行了比较。此外，使用合成数据和真实数据评估了所提出的初始化方法，并比较了PL-SLAM 算法和 ORB-SLAM 的计算时间。

TUM RGB-D 基准中的定位精度
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

用于比较的指标是绝对轨迹误差 (ATE)，由基准的评估脚本提供。 在计算误差之前，除了 RGBD-SLAM  是通过刚体变换对齐的，所有轨迹都使用相似性扭曲对齐。

.. figure:: 5.jpg
   :figclass: align-center
   :scale: 70%

地图初始化 - 综合实验
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

评估了在三个连续帧之间假设小而恒定旋转的后果。

.. figure:: 6.jpg
   :figclass: align-center

上图显示了增加帧间旋转而产生的旋转和平移误差。 虽然估计的旋转误差保持在相对较小的范围内，但小旋转假设对平移误差的影响更为严重。 无论如何，当这个初始映射被送入 BA 优化器时，位移错误会大大减少。

作者还使用经典初始化（基于单应性或基本矩阵计算）以及仅基于线的建议地图初始化来评估 PL-SLAM 方法。

.. note::

   线图初始化的准确性由于它所做的小旋转假设而下降，但在低纹理数据集 **f3_nstr_tex_far** 中，传统方法无法初始化，而作者提出的三帧小旋转线初始化方案可以成功初始化。

   但在初始帧较大的情况下，线初始化就会失败。

.. figure:: 7.jpg
   :figclass: align-center
   :scale: 60%

总结
--------------

1. 提出了 PL-SLAM，这是一种视觉 SLAM 方法，它允许同时处理点和线，并解决基于点的方法容易失败的情况，例如纹理不佳的场景或特征点消失的运动模糊图像。

2. 提出了一种新颖的基于线的地图初始化方法，该方法从三个连续图像中的 5 个线对应估计相机位姿和 3D 地图。这种方法假设这三幅图像中的帧间旋转恒定且很小。
